<h2>About</h2><p>This guide assumes that you're already familiar with using Cloudflare Pages and the Wrangler CLI. Please refer <a href="https://developers.cloudflare.com/pages/">the official Cloudflare Pages documentation</a> for more info.</p><p>If you're a developer looking to deploy a static website to Cloudflare Pages, you have a two options.</p><h2>1. Build locally and deploy locally with wrangler</h2><p>The first one, which is more efficient, is to build the website locally and use <code>wrangler</code> to publish this to Cloudflare Pages. To get started, run <code>wrangler pages project create PROJECT_NAME</code>. This will create a new Cloudflare Pages project that you can deploy to. Once complete, you can push your built Zine files to that project using <code>wrangler pages deploy ./zig-out --project-name PROJECT_NAME</code>.</p><h2>2. Use GitHub Actions</h2><p>This one is a more hands-off, but slower option.</p><p>It is inherently slower because of all the overhead introduced by GitHub Actions. Additionally, Zine is a collection of tools compiled on demand by your build script, which is a bad match for GitHub Actions given its ephemeral nature.</p><p>One day we might maintain a set of Zine actions that pre-builds Zine once for everybody but, in the meantime, the following workflow definition will use the GitHub's caching system to cache builds of Zine for you.</p><p>To get started you will need to create a new project in Cloudflare Pages. This can be done by running:</p><p><code>wrangler pages project create PROJECT_NAME</code></p><p>Once completed, we will need a few things from Cloudflare to get the GitHub Action to run:</p><ul><li><p><a href="https://github.com/cloudflare/pages-action#get-account-id">Your Cloudflare Account ID</a></p></li><li><p><a href="https://github.com/cloudflare/pages-action#generate-an-api-token">An API Token</a></p></li><li><p>The project name created in the previous command</p></li></ul><p>Replace <code>ACCOUNT_ID</code> with your Cloudflare Account ID and add your API key as a GitHub Actions secret. In the example below, this would be set to <code>CLOUDFLARE_API_TOKEN</code>.</p><p><i><strong><code>.github/workflows/cf-pages.yml</code></strong></i></p><pre><code>name: cloudflare pages

on:
  push:
    branches:
      - main  # Set a branch to deploy
jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Change if you need git info

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.12.0-dev.2701+d18f52197
          
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/zig
            zig-cache
          key: zine-${{hashFiles('build.zig.zon')}}          

      - name: Build
        run: zig build --summary all
          
      - name: Deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ACCOUNT_ID
          projectName: PROJECT_NAME
          directory: ./zig-out
          # Optional: Used for adding GitHub deployments support
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Save Cache
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.cache/zig
            zig-cache
          key: zine-${{hashFiles('build.zig.zon')}}          
</code></pre><p><strong>NOTE:</strong> If you want to have your deployments populate the GitHub deployments menu, you must also enable your Action to have read and write permissions. This can be by going to Settings -> Actions -> General -> Workflow Permissions.</p>