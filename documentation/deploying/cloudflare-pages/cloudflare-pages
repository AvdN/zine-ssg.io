<h2>About</h2><p>This guide assumes that you're already familiar with using Cloudflare Pages and the Wrangler CLI. Please refer <a href="https://developers.cloudflare.com/pages/">the official Cloudflare Pages documentation</a> for more info.</p><h2>Getting Started</h2><p>To get started you will need to first create a new Cloudflare Pages project.</p><p><i><strong><code>shell</code></strong></i></p><pre><code class="bash"><span class="constant">$ wrangler</span> <span class="constant">pages</span> <span class="constant">project</span> <span class="constant">create</span> <span class="constant">PROJECT_NAME</span>
</code></pre>
<p>, This will create a new Cloudflare Pages project that you can deploy to, which can be done in two different ways.</p><h2>1. Build locally and deploy directly with wrangler</h2><p>To publish from your computer you will need fist to build your Zine site, and then upload the output to Cloudflare Pages using <code>wrangler</code>.</p><p><strong>NOTE: currently Zine doesn't clean <code>zig-out/</code> across rebuilds so you will have to it manually.</strong></p><p><i><strong><code>shell</code></strong></i></p><pre><code class="bash"><span class="constant">$ zig</span> <span class="constant">build</span> 
<span class="constant">$ wrangler</span> <span class="constant">pages</span> <span class="constant">deploy</span> <span class="constant">./zig-out</span> <span class="constant">--project-name</span> <span class="constant">PROJECT_NAME</span>
</code></pre>
<h2>2. Use GitHub Actions</h2><p>This method uses GitHub Actions to build the site and then uploads the output to Cloudflare Pages (instead of GitHub Pages).</p><p>This section assumes that you're already familiar with GitHub Actions. Please refer <a href="https://docs.github.com/en/actions">the official GitHub Actions documentation</a> for more info.</p><p>Once we have created our Cloudflare Pages project, we will need a few things from Cloudflare:</p><ul><li><p><a href="https://github.com/cloudflare/pages-action#get-account-id">Your Cloudflare Account ID</a></p></li><li><p><a href="https://github.com/cloudflare/pages-action#generate-an-api-token">An API Token</a></p></li><li><p>The project name created in the previous command</p></li></ul><p>Replace <code>ACCOUNT_ID</code> with your Cloudflare Account ID and add your API key as a GitHub Actions secret. In the example below, this would be set to <code>CLOUDFLARE_API_TOKEN</code>.</p><p><i><strong><code>.github/workflows/cf-pages.yml</code></strong></i></p><pre><code>name: cloudflare pages

on:
  push:
    branches:
      - main  # Set a branch to deploy
jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Change if you need git info

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.12.0-dev.2701+d18f52197
          
      - name: Restore cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/zig
            zig-cache
          key: zine-${{hashFiles('build.zig.zon')}}          

      - name: Build
        run: zig build --summary all
          
      - name: Deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ACCOUNT_ID
          projectName: PROJECT_NAME
          directory: ./zig-out
          # Optional: Used for adding GitHub deployments support
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Save Cache
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.cache/zig
            zig-cache
          key: zine-${{hashFiles('build.zig.zon')}}          
</code></pre><p><strong>NOTE:</strong> If you want to have your deployments populate the GitHub deployments menu, you must also enable your Action to have read and write permissions. This can be by going to Settings -> Actions -> General -> Workflow Permissions.</p>